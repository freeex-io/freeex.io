{"version":3,"sources":["views/Nav.js","views/Main.js","App.js","serviceWorker.js","index.js","assets/logo.svg"],"names":["Nav","react_default","a","createElement","className","src","logo","alt","countEnd","body","document","getElementById","classList","add","remove","nav","getElementsByTagName","style","transform","opacity","since","getElementsByClassName","width","left","introText","divLength","length","i","Main","build_default","start","end","delay","duration","onEnd","_ref","countUpRef","ref","App","id","views_Nav","views_Main","Component","Boolean","window","location","hostname","match","render","src_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.fadee7e5.chunk.js","sourcesContent":["import React from 'react';\nimport logo from '../assets/logo.svg';\n\nconst Nav = () => {\n  return (\n    <nav className=\"menu\">\n      <div className=\"menu-link\">\n        <button>about</button>\n        <button>contact us</button>\n      </div>\n      <div className=\"nav-logo\">\n        <span className=\"logo-link\">\n          <img src={logo} alt=\"\" />\n        </span>\n      </div>\n    </nav>\n  );\n};\n\nexport default Nav;","import React from 'react';\nimport CountUp from 'react-countup';\n\nconst countEnd = () => {\n  const body = document.getElementById('app-body');\n  body.classList.add('loaded');\n  body.classList.remove('is-loading');\n\n  const nav = document.getElementsByTagName('aside')[0];\n  nav.style.transform = 'translate(0%, -50%) matrix(1, 0, 0, 1, 0, 0)';\n  nav.style.opacity = 1;\n\n  const since = document.getElementsByClassName('since')[0];\n  since.getElementsByTagName('span')[0].style.width = '3vw';\n  since.getElementsByTagName('p')[0].style.opacity = 1;\n  since.getElementsByTagName('p')[0].style.left = 0;\n\n  const introText = document.getElementsByClassName('intro-text')[0];\n  const divLength = introText.getElementsByTagName('div').length;\n  for (let i = 0; i < divLength; i++) {\n    const ele = introText.getElementsByTagName('div')[i].getElementsByTagName('h4')[0]\n    ele.style.opacity = 1;\n  }\n\n  const introSubText = document.getElementsByClassName('intro-subtext')[0];\n  introSubText.style.opacity = 1;\n}\n\nconst Main = () => {\n  return (\n    <section className=\"page\">\n      <aside className=\"nav\">\n        <ul>\n          <li className=\"active\">\n            <p>Intro</p>\n          </li>\n        </ul>\n      </aside>\n      <div className=\"overlay\"></div>\n      <div className=\"underlay\"></div>\n      <div className=\"intro\">\n        <CountUp start={1900} end={2019} delay={0} duration={5} onEnd={countEnd}>\n          {({ countUpRef }) => (\n            <div className=\"loading-count\">\n              <span ref={countUpRef} />\n            </div>\n          )}\n        </CountUp>\n        <div className=\"row\">\n          <div className=\"half bold-text\">\n            <div className=\"since\">\n              <span></span>\n              <p>EST 2019</p>\n            </div>\n            <div className=\"intro-text\">\n              <div>\n                <h4>Hello Iâ€™m Britton, I create tailor</h4>\n              </div>\n              <div>\n                <h4>made digital experiences that</h4>\n              </div>\n              <div>\n                <h4>challenge the status quo.</h4>\n              </div>\n              <div>\n                <h4>Never default. Never dull.</h4>\n              </div>\n            </div>\n          </div>\n          <div className=\"half thin-text\">\n            <p className=\"intro-subtext\">\n              Humbly designing digital products until<br />\n              robots take my job from me. But for now<br />\n              I am living the dream. Beer, music, &amp; design.\n            </p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default Main;","import React, { Component } from 'react';\n\nimport Nav from './views/Nav';\nimport Main from './views/Main';\n\nclass App extends Component {\n  componentDidMount() {\n    const body = document.getElementById('app-body');\n    body.classList.add('is-loading');\n  }\n\n  render() {\n    return (\n      <div id=\"app-body\">\n        <header>\n          <Nav />\n        </header>\n        <main>\n          <Main />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.4bdb252e.svg\";"],"sourceRoot":""}